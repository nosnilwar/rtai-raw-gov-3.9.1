
**(Before all the points to compute wcec, note that this idea is strongly
dependent in how the CFG and the wcec of each instruction - given in the file
generate by the python part (c2asm), from the input are.)**

### Graph WCEC Calculation Idea

The graph has pseudo nodes to represent loops, in this way avoiding loops and
made the graph a DAG. When compute the graph wcec, a DFS is made in the whole
graph, so, when a leaf is found, it return its rwcec (that is equal to the wcec
in this case) and the parent(s) node will analyze which one of its children has
the greatest rwcec to be taken by it and add to its wcec, and past to its
parent(s) and so on.

When a pseudo node is reached, the algorithm will take the loop that it is was
replaced by it. With the loop in hands (it doesn't matter if it's a FOR, WHILE
or DO-WHILE case), a new DFS is made only in this loop to compute the wcec. If
it has pseudo nodes within - nested loops, so, compute first their wcec and then
its own.

### Notes for the Idea

1. The pseudo nodes only points to ONE loop condition;

2. The loop condition part always do (number of loop iterations)+1 comparisons,
the only exception is the DO-WHILE statement;

3. When computing the wcec of each node, pay attention to the pseudo nodes. In
the DO-WHILE case, the pseudo node also points to the condition part and the
idea always add the condition node wcec one more time to the total loop wcec.
So, in DO-WHILE statement, it's necessary to subtract one condition wcec from
the total.

4. Another important point is the FOR statement, as said in doc/Statements.mkd,
the initialization part is put outside the loop graph, so it goes before the
pseudo node, but the file generated by the python code with the wcec of each C
instruction in the input, give the wcec value for the init part as the wcec of
the instructions related to this node plus the wcec of the loop condition part.
The reason is that the .s file generate debug information to the init and
in/decrement part, the condition one is see as a label which is tough to discern
from the other labels.

